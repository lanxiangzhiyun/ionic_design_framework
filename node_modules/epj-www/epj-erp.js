angular.module('epj-erp', [])
.service('ErpService', ['$location', function($location){
}])
.directive('epjOrder', ['$location', function($location){
  return {
    restrict: 'A',
    require:'^epjPagination',
    scope: {epjOrder:'@epjOrder'},
    transclude:true,
    template: `<td><ng-transclude></ng-transclude><i class="glyphicon" ng-class="s().order_key != epjOrder ? 'glyphicon-option-vertical' : (s().order_direction=='desc' ? 'glyphicon-chevron-down' : 'glyphicon-chevron-up')"></i></td>`,
    compile: function(element, attr) {
      return function ($scope, $element, $attr, $ctrl) {
        $scope.s = function () {
          return $location.search();
        };
        $element.on('click', function () {
          console.log('epj-order click called');
          let s = $location.search();
          let k = $attr.epjOrder;
          let order = s.order_key == k ? (s.order_direction == 'desc' ? 'asc' : 'desc') : 'asc';
          $ctrl.updateSearch({order_key: k, order_direction: order});
        });
      }
    }
  }
}])
.directive('epjPagination', ['$location',function($location){
  return {
    restrict: 'EA',
    controller: ['$scope','$element','$attrs', function($scope,$element,$attrs) {
      let config = $scope[$attrs.config];
      this.updateSearch = function(query) {
        let search = _.extend(config.search||{}, $location.search(), query);
        $location.path($location.path()).search(search);
        config.load && config.load(search);
      }
    }],
    link: function($scope, $element, $attr, $ctrl) {
      let config = $scope[$attr.config];
      let update = $attr.update;
      if (update) {
        $scope[update] = $ctrl.updateSearch;
      }
      let paging = angular.element('<ul>');
      $element.append(angular.element('<div class="text-center">').append(paging));
      let pconfig = {
        visiblePages: 10,
        startPage: parseInt($location.search().page || 1),
        onPageClick: function (event, page) {
          console.log('page clicked:', page);
          $ctrl.updateSearch({page: page});
        }
      };
      let pageSize = config.pageSize || 10;
      if (config.count.then) {
        config.count.then((res)=> {
          pconfig.totalPages = Math.ceil(res.count / pageSize);
          if (pconfig.totalPages)
            $(paging[0]).twbsPagination(pconfig);
        });
      } else {
        pconfig.totalPages = Math.ceil(config.count / pageSize);
        if (pconfig.totalPages)
          $(paging[0]).twbsPagination(pconfig);
      }
    }
  }
}])
;
